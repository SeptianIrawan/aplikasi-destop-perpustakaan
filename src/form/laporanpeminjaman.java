/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import Koneksi.KoneksiDB;
import com.toedter.calendar.JDateChooser;
import java.awt.Desktop;
import static java.lang.String.format;
import java.math.BigDecimal;
import java.net.URI;
import javax.swing.table.DefaultTableModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.swing.JScrollPane;
/**
 *
 * @author oc
 */
public class laporanpeminjaman extends javax.swing.JFrame {
     public Connection con;
    public Statement stat;
    public ResultSet rs;
    public String sql, tgl="";
    /**
     * Creates new form laporanpeminjaman
     */
    public laporanpeminjaman() {
        initComponents();
        setLocationRelativeTo(null);
        KoneksiDB db = new KoneksiDB();
        db.koneksiperpus();
        con=db.con;
        stat=db.stat;
        rs=db.rs;
        
        tampillaporan();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabellaporan = new javax.swing.JTable();
        CETAK = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        tpencarianlaporan = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabellaporan.setBackground(new java.awt.Color(255, 193, 7));
        tabellaporan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabellaporan);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 122, 868, 407));

        CETAK.setBackground(new java.awt.Color(255, 0, 0));
        CETAK.setForeground(new java.awt.Color(255, 255, 255));
        CETAK.setText("PRINT");
        CETAK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CETAKActionPerformed(evt);
            }
        });
        jPanel1.add(CETAK, new org.netbeans.lib.awtextra.AbsoluteConstraints(803, 535, -1, 60));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("LAPORAN PEMINJAMAN");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, -1, -1));

        jButton2.setBackground(new java.awt.Color(3, 169, 244));
        jButton2.setText("Cari");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 80, 60, 30));

        tpencarianlaporan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tpencarianlaporanActionPerformed(evt);
            }
        });
        jPanel1.add(tpencarianlaporan, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, 160, 30));

        jToggleButton1.setBackground(new java.awt.Color(130, 126, 126));
        jToggleButton1.setText("KEMBALI");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 540, -1, 50));

        jButton3.setBackground(new java.awt.Color(211, 47, 47));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("LEMBALIKAN");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 540, -1, 50));

        jButton4.setBackground(new java.awt.Color(176, 190, 197));
        jButton4.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        jButton4.setText("CLEAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 80, 90, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 949, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tpencarianlaporanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tpencarianlaporanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tpencarianlaporanActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String idPinjam = tpencarianlaporan.getText().trim(); // Mengambil input dari JTextField

        if (idPinjam.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Silakan masukkan ID Peminjaman untuk mencari.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            String sql = "SELECT * FROM tbpeminjam WHERE kodepinjam = '" + idPinjam + "'";
            Statement stat = con.createStatement();
            ResultSet rs = stat.executeQuery(sql);

            DefaultTableModel tabel = new DefaultTableModel();
            tabel.addColumn("Kode");
            tabel.addColumn("Id Anggota");
            tabel.addColumn("Nama");  
            tabel.addColumn("Buku");
            tabel.addColumn("No Rak");
            tabel.addColumn("Mulai Pinjam");
            tabel.addColumn("Akhir Pinjam");
            tabel.addColumn("lama Pinjam");
            tabel.addColumn("Harga");
            tabel.addColumn("Denda");
            if (rs.next()) {
                // Menambahkan data hasil pencarian ke tabel
                tabel.addRow(new Object[]{
                     rs.getString("kodepinjam"),rs.getString(2),rs.getString(3),rs.getString(4),
                    rs.getString(5),rs.getDate(6),rs.getDate(7),rs.getString(8),
                    rs.getString(9),rs.getString(10)
                });
                tabellaporan.setModel(tabel); // Menampilkan hasil pencarian di JTable
            } else {
                JOptionPane.showMessageDialog(this, "Peminjam dengan ID " + idPinjam + " tidak ditemukan.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                tampillaporan(); // Menampilkan semua data jika tidak ada hasil
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // Membuat instance dari FrameB
        formpeminjaman pindah = new formpeminjaman();

        // Menampilkan FrameB
        pindah.setVisible(true);

        // Menutup FrameA (frame saat ini)
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Mendapatkan baris yang dipilih
int row = tabellaporan.getSelectedRow();

// Pastikan baris yang dipilih valid
if (row != -1) {
    // Mengambil ID Pinjam dan Buku dari baris yang dipilih
    String idPinjam = tabellaporan.getValueAt(row, 0).toString(); // ID Pinjam dari kolom pertama
    String Buku = tabellaporan.getValueAt(row, 3).toString(); // Asumsi kolom keempat berisi judul buku

    // Ambil tanggal 'Akhir Pinjam' dari database
    try {
        String sqlSelect = "SELECT akhirpinjam, denda FROM tbpeminjam WHERE kodepinjam = ?";
        PreparedStatement pstmt = con.prepareStatement(sqlSelect);
        pstmt.setString(1, idPinjam); // Set parameter untuk idPinjam
        ResultSet rs = pstmt.executeQuery();

        if (rs.next()) {
            // Ambil tanggal 'Akhir Pinjam' dari hasil query
            java.sql.Date akhirPinjamDate = rs.getDate("akhirpinjam");
            LocalDate akhirPinjam = akhirPinjamDate.toLocalDate();

            // Ambil nilai denda dari database
            long denda = rs.getLong("denda"); // Kolom denda dari database

            // Jika denda adalah 0, hitung denda berdasarkan keterlambatan
            if (denda == 0 && akhirPinjam.isBefore(LocalDate.now())) {
                long daysLate = ChronoUnit.DAYS.between(akhirPinjam, LocalDate.now()); // Hitung hari keterlambatan
                denda = daysLate * 2500; // Tarif denda 2500 per hari

                // Update denda di database
                String sqlUpdateDenda = "UPDATE tbpeminjam SET denda = ? WHERE kodepinjam = ?";
                PreparedStatement pstmtUpdateDenda = con.prepareStatement(sqlUpdateDenda);
                pstmtUpdateDenda.setLong(1, denda);
                pstmtUpdateDenda.setString(2, idPinjam);
                pstmtUpdateDenda.executeUpdate();
            }

            // Menampilkan pesan denda jika ada
            if (denda > 0) {
                int confirm = JOptionPane.showOptionDialog(rootPane,
                        "Anda harus membayar denda sebesar Rp " + denda + ". Apakah Anda ingin melanjutkan?",
                        "Pemberitahuan Denda",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.INFORMATION_MESSAGE,
                        null,
                        new Object[]{"OK"},
                        "OK");

                if (confirm == JOptionPane.YES_OPTION) {
                    // Menyisipkan data ke tabel tbpengembalian
                    try {
                        String sqlSelectPengembalian = "SELECT * FROM tbpeminjam WHERE kodepinjam = ?";
                        PreparedStatement pstmtSelect = con.prepareStatement(sqlSelectPengembalian);
                        pstmtSelect.setString(1, idPinjam);
                        ResultSet rsPengembalian = pstmtSelect.executeQuery();

                        if (rsPengembalian.next()) {
                            String idAnggota = rsPengembalian.getString("idanggota");
                            String nama = rsPengembalian.getString("nama");
                            String nomorRak = rsPengembalian.getString("nomorrak");
                            Date mulaiPinjam = rsPengembalian.getDate("mulaipinjam");
                            Date akhirPinjamDb = rsPengembalian.getDate("akhirpinjam");
                            String lamaPinjam = rsPengembalian.getString("lamapinjam");
                            String harga = rsPengembalian.getString("harga");
                            BigDecimal dendaPengembalian = rsPengembalian.getBigDecimal("denda");

                            String sqlInsertPengembalian = "INSERT INTO tbpengembalian (kodepinjam, idanggota, nama, buku, nomorrak, mulaipinjam, akhirpinjam, lamapinjam, harga, denda) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            PreparedStatement pstmtInsert = con.prepareStatement(sqlInsertPengembalian);
                            pstmtInsert.setString(1, idPinjam);
                            pstmtInsert.setString(2, idAnggota);
                            pstmtInsert.setString(3, nama);
                            pstmtInsert.setString(4, Buku);
                            pstmtInsert.setString(5, nomorRak);
                            pstmtInsert.setDate(6, (java.sql.Date) mulaiPinjam);
                            pstmtInsert.setDate(7, (java.sql.Date) akhirPinjamDb);
                            pstmtInsert.setString(8, lamaPinjam);
                            pstmtInsert.setString(9, harga);
                            pstmtInsert.setBigDecimal(10, dendaPengembalian);
                            pstmtInsert.executeUpdate();

                            // Menghapus data dari tabel tbpeminjam
                            String sqlDelete = "DELETE FROM tbpeminjam WHERE kodepinjam = ?";
                            PreparedStatement pstmtDelete = con.prepareStatement(sqlDelete);
                            pstmtDelete.setString(1, idPinjam);
                            pstmtDelete.executeUpdate();

                            // Update jumlah buku yang tersedia di tabel tbbuku
                            String sqlUpdateJumlah = "UPDATE tbbuku SET jumlah = jumlah + 1 WHERE judul = ?";
                            PreparedStatement pstmtUpdateJumlah = con.prepareStatement(sqlUpdateJumlah);
                            pstmtUpdateJumlah.setString(1, Buku);
                            pstmtUpdateJumlah.executeUpdate();

                            JOptionPane.showMessageDialog(rootPane, "Buku berhasil dikembalikan dan data pengembalian telah dicatat.");
                            tampillaporan();
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Data peminjaman tidak ditemukan untuk pengembalian.");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Gagal mencatat data pengembalian: " + e.getMessage());
                    }
                }
            } else {
                int confirm = JOptionPane.showConfirmDialog(rootPane, "Apakah Anda yakin ingin mengembalikan buku dengan kode pinjam: " + idPinjam + "?", "Konfirmasi Pengembalian", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    // Lakukan langkah yang sama untuk pengembalian tanpa denda
                    try {
                        String sqlSelectPengembalian = "SELECT * FROM tbpeminjam WHERE kodepinjam = ?";
                        PreparedStatement pstmtSelect = con.prepareStatement(sqlSelectPengembalian);
                        pstmtSelect.setString(1, idPinjam);
                        ResultSet rsPengembalian = pstmtSelect.executeQuery();

                        if (rsPengembalian.next()) {
                            String idAnggota = rsPengembalian.getString("idanggota");
                            String nama = rsPengembalian.getString("nama");
                            String nomorRak = rsPengembalian.getString("nomorrak");
                            Date mulaiPinjam = rsPengembalian.getDate("mulaipinjam");
                            Date akhirPinjamDb = rsPengembalian.getDate("akhirpinjam");
                            String lamaPinjam = rsPengembalian.getString("lamapinjam");
                            String harga = rsPengembalian.getString("harga");
                            BigDecimal dendaPengembalian = rsPengembalian.getBigDecimal("denda");

                            String sqlInsertPengembalian = "INSERT INTO tbpengembalian (kodepinjam, idanggota, nama, buku, nomorrak, mulaipinjam, akhirpinjam, lamapinjam, harga, denda) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            PreparedStatement pstmtInsert = con.prepareStatement(sqlInsertPengembalian);
                            pstmtInsert.setString(1, idPinjam);
                            pstmtInsert.setString(2, idAnggota);
                            pstmtInsert.setString(3, nama);
                            pstmtInsert.setString(4, Buku);
                            pstmtInsert.setString(5, nomorRak);
                            pstmtInsert.setDate(6, new java.sql.Date(mulaiPinjam.getTime())); // Konversi dari java.util.Date
                            pstmtInsert.setDate(7, (java.sql.Date) akhirPinjamDb); // Jika akhirPinjamDb sudah java.sql.Date
                            pstmtInsert.setString(8, lamaPinjam);
                            pstmtInsert.setString(9, harga);
                            pstmtInsert.setBigDecimal(10, dendaPengembalian);
                            pstmtInsert.executeUpdate();

                            String sqlDelete = "DELETE FROM tbpeminjam WHERE kodepinjam = ?";
                            PreparedStatement pstmtDelete = con.prepareStatement(sqlDelete);
                            pstmtDelete.setString(1, idPinjam);
                            pstmtDelete.executeUpdate();

                            String sqlUpdateJumlah = "UPDATE tbbuku SET jumlah = jumlah + 1 WHERE judul = ?";
                            PreparedStatement pstmtUpdateJumlah = con.prepareStatement(sqlUpdateJumlah);
                            pstmtUpdateJumlah.setString(1, Buku);
                            pstmtUpdateJumlah.executeUpdate();

                            JOptionPane.showMessageDialog(rootPane, "Buku berhasil dikembalikan.");
                            tampillaporan();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Gagal mencatat data pengembalian: " + e.getMessage());
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Data peminjaman tidak ditemukan.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, "Gagal mengakses data peminjaman: " + e.getMessage());
    }
} else {
    JOptionPane.showMessageDialog(this, "Silakan pilih buku yang ingin dikembalikan.", "Peringatan", JOptionPane.WARNING_MESSAGE);
}

       // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        // Mengosongkan JTextField pencarian
        tpencarianlaporan.setText("");
        
        // Menampilkan semua data buku di JTable
        tampillaporan();
       
    }//GEN-LAST:event_jButton4ActionPerformed

    private void CETAKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CETAKActionPerformed
        StringBuilder dataPeminjam = new StringBuilder();

        // Menambahkan Kop Laporan di bagian atas
        dataPeminjam.append("                                      PERPUSTAKAAN LANCANG KUNING\n");
        dataPeminjam.append("                                  Jl. Pendidikan No.1, Pekanbaru, Riau\n");
        dataPeminjam.append("                                      Telepon: (0761) 123456789\n");
        dataPeminjam.append("===============================================================================================================\n");

        // Menambahkan header kolom
        dataPeminjam.append(String.format("%-9s %-16s %-14s %-9s %-14s %-12s %-12s %-8s %-15s\n",
            "Kode", "Nama", "Buku", "Nomor Rak", "Mulai Pinjam", "Akhir Pinjam", "Lama Pinjam", "Harga", "Denda"));
    dataPeminjam.append("----------------------------------------------------------------------------------------------------------------\n");

    try {
    // Mengambil data dari database
    String sql = "SELECT * FROM tbpeminjam";
    Statement stat = con.createStatement();
    ResultSet rs = stat.executeQuery(sql);

    LocalDate today = LocalDate.now(); // Tanggal hari ini

    while (rs.next()) {
        // Mengambil data dari database
        String kode = rs.getString("kodepinjam");
        String nama = rs.getString("nama");
        String buku = rs.getString("buku");
        String nomorRak = rs.getString("nomorrak");
        String mulaiPinjam = rs.getDate("mulaipinjam").toString();
        String akhirPinjam = rs.getDate("akhirpinjam").toString();
        String lamaPinjam = rs.getString("lamapinjam");
        String harga = rs.getString("harga");
        long denda = rs.getLong("denda"); // Denda dari database

        // Ambil tanggal 'Akhir Pinjam' dari database dan hitung denda jika diperlukan
        java.sql.Date akhirPinjamDate = rs.getDate("akhirpinjam");
        LocalDate akhirPinjamDateLocal = akhirPinjamDate.toLocalDate();

        // Jika denda di database adalah 0, hitung denda berdasarkan keterlambatan
        if (denda == 0 && akhirPinjamDateLocal.isBefore(today)) {
            long daysLate = ChronoUnit.DAYS.between(akhirPinjamDateLocal, today); // Hitung hari keterlambatan
            denda = daysLate * 2500; // Tarif denda 2500 per hari
        }

        // Menambahkan data ke StringBuilder dengan pemindahan teks panjang ke baris berikutnya jika diperlukan
        dataPeminjam.append(String.format("%-7s %-15s %-15s %-9s %-13s %-14s %-11s %-8s %-15s\n",
          kode, nama, buku, nomorRak, mulaiPinjam, akhirPinjam, lamaPinjam, harga, denda));

        // Memindahkan teks panjang ke baris berikutnya jika kolom terlalu panjang
        if (kode.length() > 12) {
            dataPeminjam.append(String.format("%-7s\n", kode.substring(12)));
        }
        if (nama.length() > 20) {
            dataPeminjam.append(String.format("%-32s %-15s\n", "", nama.substring(20)));
        }
        if (buku.length() > 20) {
            dataPeminjam.append(String.format("%-44s %-15s\n", "", buku.substring(20)));
        }
        if (nomorRak.length() > 19) {
            dataPeminjam.append(String.format("%-54s %-13s\n", "", nomorRak.substring(19)));
        }
        if (mulaiPinjam.length() > 20) {
            dataPeminjam.append(String.format("%-73s %-20s\n", "", mulaiPinjam.substring(20)));
        }
        if (akhirPinjam.length() > 12) {
            dataPeminjam.append(String.format("%-93s %-12s\n", "", akhirPinjam.substring(12)));
        }
        if (lamaPinjam.length() > 12) {
            dataPeminjam.append(String.format("%-105s %-12s\n", "", lamaPinjam.substring(12)));
        }
        if (harga != null && harga.length() > 20) {
            dataPeminjam.append(String.format("%-117s %-20s\n", "", harga.substring(20)));
        }
                // Convert denda to String for substring operation
        String dendaString = String.valueOf(denda); // Convert long to String

        if (dendaString.length() > 15) {
            dataPeminjam.append(String.format("%-137s %-15s\n", "", dendaString.substring(15)));
        }

        }
        dataPeminjam.append("\n\n\n\n");
        dataPeminjam.append("                                                                                Pekanbaru, " + java.time.LocalDate.now() + "\n\n");
        dataPeminjam.append("                                                                              Pimpinan Perpustakaan\n\n\n\n");
        dataPeminjam.append("                                                                              -----------------------\n");
        dataPeminjam.append("                                                                                (Septian Irawan)\n");

        // Membuat instance dari cetakpeminjam
        cetakpeminjam formCetakPeminjam = new cetakpeminjam();
        formCetakPeminjam.setVisible(true);

        // Menampilkan data di JTextArea pada form cetakpeminjam
        formCetakPeminjam.getTextAreaCetakPeminjam().setText(dataPeminjam.toString());

        // Mengatur warna latar belakang dan teks
        formCetakPeminjam.getTextAreaCetakPeminjam().setBackground(new java.awt.Color(176, 190, 197)); // Latar belakang abu-abu terang
        formCetakPeminjam.getTextAreaCetakPeminjam().setForeground(new java.awt.Color(51, 51, 51)); // Teks hitam
        formCetakPeminjam.getTextAreaCetakPeminjam().setFont(new java.awt.Font("Monospaced", java.awt.Font.PLAIN, 12)); // Font monospaced

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_CETAKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(laporanpeminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(laporanpeminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(laporanpeminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(laporanpeminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new laporanpeminjaman().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CETAK;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTable tabellaporan;
    private javax.swing.JTextField tpencarianlaporan;
    // End of variables declaration//GEN-END:variables

    private void tampillaporan() {
DefaultTableModel tabel = new DefaultTableModel();
tabel.addColumn("Kode");
tabel.addColumn("Id Anggota");
tabel.addColumn("Nama");
tabel.addColumn("Buku");
tabel.addColumn("No Rak");
tabel.addColumn("Mulai Pinjam");
tabel.addColumn("Akhir Pinjam");
tabel.addColumn("Lama Pinjam");
tabel.addColumn("Harga");
tabel.addColumn("Denda");

try {
    sql = "SELECT * FROM tbpeminjam";
    stat = con.createStatement();
    rs = stat.executeQuery(sql);

    LocalDate today = LocalDate.now(); // Tanggal hari ini

    while (rs.next()) {
        // Ambil tanggal 'Akhir Pinjam' dari database
        java.sql.Date akhirPinjamDate = rs.getDate("akhirpinjam");
        LocalDate akhirPinjam = akhirPinjamDate.toLocalDate();

        // Ambil nilai denda dari database
        long denda = rs.getLong("denda"); // Kolom denda dari database

        // Jika denda di database adalah 0, hitung denda berdasarkan keterlambatan
        if (denda == 0 && akhirPinjam.isBefore(today)) {
            long daysLate = ChronoUnit.DAYS.between(akhirPinjam, today); // Hitung hari keterlambatan
            denda = daysLate * 2500; // Tarif denda 2500 per hari
        }

        // Tambahkan data ke tabel termasuk denda
        tabel.addRow(new Object[]{
            rs.getString("kodepinjam"),
            rs.getString("idanggota"),
            rs.getString("nama"),
            rs.getString("buku"),
            rs.getString("nomorrak"),
            rs.getDate("mulaipinjam"),
            akhirPinjamDate,
            rs.getString("lamapinjam"),
            rs.getString("harga"),
            denda // Tampilkan nilai denda
        });
    }
    tabellaporan.setModel(tabel);
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error: " + e);
}

    }

}
